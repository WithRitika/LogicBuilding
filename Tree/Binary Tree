function TreeNode(val, left= null, right=null){
    this.value = (val === undefined ? 0 : val);
    this.left = left;
    this.right = right;
}

function createBST(arr){
    let root = null;
    arr.forEach(value=>{
     root = insertIntoBST(root, value);
     });
    return root;
}

function insertIntoBST(root, value){
    if(!root){
        return new TreeNode(value);
    }
    if(value < root.value){
        root.left = insertIntoBST(root.left, value);
    }else{
        root.right = insertIntoBST(root.right, value);
    }
    return root;
}
function preOrderTraversal(node){
        if(!node){return [];}
        return [node.value, ...preOrderTraversal(node.left), ...preOrderTraversal(node.right)];
}
function inOrderTraversal(node){
         if(!node){return [];}
        return [...inOrderTraversal(node.left), node.value, ...inOrderTraversal(node.right)];
}
function postOrderTraversal(node){
           if(!node){return [];}
        return [...postOrderTraversal(node.left), ...postOrderTraversal(node.right), node.value];
}


function searchInBST(root,value){
  if(!root){console.log('Not available');
    return;
  }
  if(root.value === value){
    console.log('value is available: ', value);
    return;
  }else{
     if(value < root.value){
      return searchInBST(root.left, value);
    }else{
      return searchInBST(root.right, value);
    }
  }
}


const arr =  [45, 22, 17, 31, 23];
const valArr = [35,28,12,14];

const root = createBST(arr);

for(let value of valArr){
    insertIntoBST(root, value);
}
const preOrderTraverse = preOrderTraversal(root);
const inOrderTraverse = inOrderTraversal(root);
const postOrderTraverse = postOrderTraversal(root);

console.log('arr--->>>', arr);
console.log('preOrderTraverse--->>>', preOrderTraverse);
console.log('inOrderTraverse--->>>', inOrderTraverse);
console.log('postOrderTraverse--->>>', postOrderTraverse);

searchInBST(root, 5); //value is available: 5
